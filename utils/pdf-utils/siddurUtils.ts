// src/utils/siddurUtils.ts

// Import pdf-lib essentials
import { PDFDocument, StandardFonts, rgb, PDFFont } from 'pdf-lib';

/**
 * Enum representing different Nusachim (rites/customs) or Siddur formats.
 * For this initial simple version, it will only slightly affect the PDF content.
 */
export enum SiddurFormat {
  NusachAshkenaz = 1,
  NusachSefard = 2,
  // We can add more later
}

/**
 * Formats a date object to MM/DD/YYYY string format.
 */
export const formatDate = (date: Date): string => {
  return date.toLocaleDateString('en-US', {
    month: '2-digit',
    day: '2-digit',
    year: 'numeric',
  });
};

/**
 * Simplified parameters for generating a very basic Siddur PDF.
 */
interface GenerateSiddurPDFParams {
  /** The primary date for which the Siddur is being generated */
  selectedDate: string;
  /** The desired Siddur format or Nusach */
  siddurFormat: SiddurFormat;
  /** Optional: Name for personalization */
  userName?: string;
  // Other complex parameters like prayerSelections, nusachDetails, holidayInfo
  // are removed for this initial simple version.
}

/**
 * Generates a very basic Siddur PDF with a title and some text,
 * focusing on the core PDF generation mechanism.
 * This function now returns the PDF data as a Uint8Array.
 */
export const generateSiddurPDF = async ({
  selectedDate,
  siddurFormat,
  userName,
}: GenerateSiddurPDFParams): Promise<Uint8Array> => { // Changed return type
  const dateForSiddur = new Date(selectedDate);

  // 1. Create a new PDFDocument
  const pdfDoc = await PDFDocument.create();

  // 2. Embed a standard font
  // IMPORTANT: For actual Hebrew text later, you MUST embed a specific Hebrew font.
  // For now, we use Helvetica for basic English/Latin characters.
  const font: PDFFont = await pdfDoc.embedFont(StandardFonts.Helvetica);

  // 3. Add a page
  const page = pdfDoc.addPage(); // Default page size (Letter)
  const { width, height } = page.getSize();
  let yPosition = height - 70; // Start drawing from the top

  // 4. Draw some simple text based on parameters
  let title = `Siddur Page (${SiddurFormat[siddurFormat]})`;
  page.drawText(title, {
    x: 50,
    y: yPosition,
    font: font,
    size: 24,
    color: rgb(0, 0.53, 0.71), // Blue
  });
  yPosition -= 40; // Move down

  page.drawText(`Date: ${formatDate(dateForSiddur)}`, {
    x: 50,
    y: yPosition,
    font: font,
    size: 12,
    color: rgb(0, 0, 0), // Black
  });
  yPosition -= 20;

  if (userName) {
    page.drawText(`For: ${userName}`, {
      x: 50,
      y: yPosition,
      font: font,
      size: 12,
      color: rgb(0, 0, 0),
    });
    yPosition -= 20;
  }

  let mainText = "This is a very basic PDF generated by generateSiddurPDF.\n";
  switch (siddurFormat) {
    case SiddurFormat.NusachAshkenaz:
      mainText += "Content for Nusach Ashkenaz would go here eventually.";
      break;
    case SiddurFormat.NusachSefard:
      mainText += "Content for Nusach Sefard would go here eventually.";
      break;
    default:
      mainText += "Content for an unknown format.";
  }

  // Drawing potentially multi-line text requires a bit more care if you want auto-wrapping.
  // For simplicity, this example just puts the string.
  // For actual prayer text, you'll iterate through lines and handle placement.
  page.drawText(mainText, {
    x: 50,
    y: yPosition,
    font: font,
    size: 12,
    lineHeight: 15, // Basic line height
    color: rgb(0, 0, 0),
  });

  // 5. Serialize the PDFDocument to bytes (a Uint8Array)
  const pdfBytes = await pdfDoc.save();

  return pdfBytes;
};

// The onGenerationSuccessActions callback is removed from params and logic for this simple version.
// The complex switch statement calling different generator functions is removed.
// The complex type imports (PrayerSectionType, etc.) are removed as they are no longer used.
// The imports for StandardSiddurGenerator and GenerateSiddurFormatB are removed.