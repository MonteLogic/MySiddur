// build-prayer-data.js

const fs = require('fs');
const path = require('path');

// --- Define Paths ---
const prayersDir = path.join(__dirname, 'prayer/prayer-database');
const liturgyFile = path.join(__dirname, 'prayer/prayer-content/ashkenazi-prayer-info.json');

// --- MODIFIED --- Output paths are now cleaner
const outputDataDir = path.join(__dirname, 'prayer-data-private');
const outputIndexFile = path.join(__dirname, 'generated/prayer-index.ts'); // Moved to a dedicated 'generated' folder

// --- NEW --- Step 1: Get the list of required prayer IDs from the liturgy file.
const getRequiredPrayerIds = () => {
  console.log(`üìñ Reading liturgy file: ${liturgyFile}`);
  const liturgyContent = fs.readFileSync(liturgyFile, 'utf-8');
  const liturgyJson = JSON.parse(liturgyContent);
  const prayerIds = new Set();

  // Helper function to recursively find all 'prayer-id' keys
  const findIds = (obj) => {
    for (const key in obj) {
      if (key === 'prayer-id' && typeof obj[key] === 'string') {
        prayerIds.add(obj[key]);
      } else if (typeof obj[key] === 'object' && obj[key] !== null) {
        findIds(obj[key]);
      }
    }
  };

  findIds(liturgyJson);
  console.log(`Found ${prayerIds.size} unique prayer-ids required by the liturgy.`);
  return prayerIds;
};

const requiredPrayerIds = getRequiredPrayerIds();

// --- Setup ---
// Create output directories if they don't exist
fs.mkdirSync(path.dirname(outputIndexFile), { recursive: true });
if (!fs.existsSync(outputDataDir)) {
  fs.mkdirSync(outputDataDir, { recursive: true });
}

const prayerIndex = {};

console.log('üîç Starting to scan prayer directories...');

fs.readdirSync(prayersDir).forEach(subDir => {
  const subDirPath = path.join(prayersDir, subDir);
  if (fs.statSync(subDirPath).isDirectory()) {
    fs.readdirSync(subDirPath).forEach(file => {
      if (path.extname(file) === '.json') {
        const filePath = path.join(subDirPath, file);
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        const jsonData = JSON.parse(fileContent);
        const prayerId = Object.keys(jsonData)[0];

        // --- MODIFIED --- Only process the prayer if it's on our "shopping list".
        if (prayerId && requiredPrayerIds.has(prayerId)) {
          console.log(`‚úÖ Processing required prayer: ${prayerId}`);
          const prayerData = jsonData[prayerId];

          prayerIndex[prayerId] = {
            id: prayerId,
            title: prayerData['prayer-title'],
          };

          const individualOutputFile = path.join(outputDataDir, `${prayerId}.json`);
          fs.writeFileSync(individualOutputFile, JSON.stringify(prayerData));
        }
      }
    });
  }
});

const indexFileContent = `// This file is auto-generated by build-prayer-data.js. Do not edit manually.

export interface PrayerIndexEntry {
  id: string;
  title: string;
}

export const prayerIndex: { [key: string]: PrayerIndexEntry } = ${JSON.stringify(
  prayerIndex,
  null,
  2
)};
`;

fs.writeFileSync(outputIndexFile, indexFileContent);

console.log(`\nüéâ Success! Created index for ${Object.keys(prayerIndex).length} required prayers.`);
console.log(`üóÇÔ∏è  Individual prayer files are located in: ${outputDataDir}`);
console.log(`üìÑ Index file is located in: ${outputIndexFile}`);